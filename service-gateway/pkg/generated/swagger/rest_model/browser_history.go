// Code generated by go-swagger; DO NOT EDIT.

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BrowserHistory browser history
// swagger:model BrowserHistory
type BrowserHistory struct {

	// browser name
	// Required: true
	BrowserName *string `json:"browserName"`

	// browser version
	// Required: true
	BrowserVersion *string `json:"browserVersion"`

	// id
	ID int64 `json:"id,omitempty"`

	// is mobile
	// Required: true
	IsMobile *string `json:"isMobile"`

	// language
	// Required: true
	Language *string `json:"language"`

	// os name
	// Required: true
	OsName *string `json:"osName"`

	// os version
	// Required: true
	OsVersion *string `json:"osVersion"`

	// timestamp
	// Required: true
	Timestamp *string `json:"timestamp"`

	// timezone
	// Required: true
	Timezone *string `json:"timezone"`

	// user agent
	// Required: true
	UserAgent *string `json:"userAgent"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this browser history
func (m *BrowserHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrowserName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBrowserVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsMobile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrowserHistory) validateBrowserName(formats strfmt.Registry) error {

	if err := validate.Required("browserName", "body", m.BrowserName); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateBrowserVersion(formats strfmt.Registry) error {

	if err := validate.Required("browserVersion", "body", m.BrowserVersion); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateIsMobile(formats strfmt.Registry) error {

	if err := validate.Required("isMobile", "body", m.IsMobile); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("osName", "body", m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("osVersion", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *BrowserHistory) validateUserAgent(formats strfmt.Registry) error {

	if err := validate.Required("userAgent", "body", m.UserAgent); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrowserHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrowserHistory) UnmarshalBinary(b []byte) error {
	var res BrowserHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
