// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/generated/grpc/location.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLocationClient is a mock of LocationClient interface
type MockLocationClient struct {
	ctrl     *gomock.Controller
	recorder *MockLocationClientMockRecorder
}

// MockLocationClientMockRecorder is the mock recorder for MockLocationClient
type MockLocationClientMockRecorder struct {
	mock *MockLocationClient
}

// NewMockLocationClient creates a new mock instance
func NewMockLocationClient(ctrl *gomock.Controller) *MockLocationClient {
	mock := &MockLocationClient{ctrl: ctrl}
	mock.recorder = &MockLocationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocationClient) EXPECT() *MockLocationClientMockRecorder {
	return m.recorder
}

// AddSession mocks base method
func (m *MockLocationClient) AddSession(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSession", varargs...)
	ret0, _ := ret[0].(*LocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession
func (mr *MockLocationClientMockRecorder) AddSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockLocationClient)(nil).AddSession), varargs...)
}

// MockLocationServer is a mock of LocationServer interface
type MockLocationServer struct {
	ctrl     *gomock.Controller
	recorder *MockLocationServerMockRecorder
}

// MockLocationServerMockRecorder is the mock recorder for MockLocationServer
type MockLocationServerMockRecorder struct {
	mock *MockLocationServer
}

// NewMockLocationServer creates a new mock instance
func NewMockLocationServer(ctrl *gomock.Controller) *MockLocationServer {
	mock := &MockLocationServer{ctrl: ctrl}
	mock.recorder = &MockLocationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocationServer) EXPECT() *MockLocationServerMockRecorder {
	return m.recorder
}

// AddSession mocks base method
func (m *MockLocationServer) AddSession(arg0 context.Context, arg1 *LocationRequest) (*LocationResponse, error) {
	ret := m.ctrl.Call(m, "AddSession", arg0, arg1)
	ret0, _ := ret[0].(*LocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession
func (mr *MockLocationServerMockRecorder) AddSession(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockLocationServer)(nil).AddSession), arg0, arg1)
}
