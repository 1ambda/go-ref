// Code generated by MockGen. DO NOT EDIT.
// Source: internal/websocket/websocket_manager.go

// Package websocket is a generated GoMock package.
package websocket

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Broadcast mocks base method
func (m *MockManager) Broadcast(message *Message) {
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockManagerMockRecorder) Broadcast(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockManager)(nil).Broadcast), message)
}

// SubscribeConnectionCount mocks base method
func (m *MockManager) SubscribeConnectionCount() <-chan string {
	ret := m.ctrl.Call(m, "SubscribeConnectionCount")
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// SubscribeConnectionCount indicates an expected call of SubscribeConnectionCount
func (mr *MockManagerMockRecorder) SubscribeConnectionCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeConnectionCount", reflect.TypeOf((*MockManager)(nil).SubscribeConnectionCount))
}

// Stop mocks base method
func (m *MockManager) Stop() <-chan bool {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}
