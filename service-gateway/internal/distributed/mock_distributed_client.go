// Code generated by MockGen. DO NOT EDIT.
// Source: internal/distributed/distributed_client.go

// Package distributed is a generated GoMock package.
package distributed

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDistributedClient is a mock of DistributedClient interface
type MockDistributedClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedClientMockRecorder
}

// MockDistributedClientMockRecorder is the mock recorder for MockDistributedClient
type MockDistributedClientMockRecorder struct {
	mock *MockDistributedClient
}

// NewMockDistributedClient creates a new mock instance
func NewMockDistributedClient(ctrl *gomock.Controller) *MockDistributedClient {
	mock := &MockDistributedClient{ctrl: ctrl}
	mock.recorder = &MockDistributedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDistributedClient) EXPECT() *MockDistributedClientMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockDistributedClient) Publish(message *DistributedMessage) {
	m.ctrl.Call(m, "Publish", message)
}

// Publish indicates an expected call of Publish
func (mr *MockDistributedClientMockRecorder) Publish(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockDistributedClient)(nil).Publish), message)
}

// Stop mocks base method
func (m *MockDistributedClient) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockDistributedClientMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDistributedClient)(nil).Stop))
}
