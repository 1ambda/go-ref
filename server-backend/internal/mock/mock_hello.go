// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/hello.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockHelloClient is a mock of HelloClient interface
type MockHelloClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelloClientMockRecorder
}

// MockHelloClientMockRecorder is the mock recorder for MockHelloClient
type MockHelloClientMockRecorder struct {
	mock *MockHelloClient
}

// NewMockHelloClient creates a new mock instance
func NewMockHelloClient(ctrl *gomock.Controller) *MockHelloClient {
	mock := &MockHelloClient{ctrl: ctrl}
	mock.recorder = &MockHelloClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloClient) EXPECT() *MockHelloClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockHelloClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockHelloClientMockRecorder) SayHello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloClient)(nil).SayHello), varargs...)
}

// MockHelloServer is a mock of HelloServer interface
type MockHelloServer struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServerMockRecorder
}

// MockHelloServerMockRecorder is the mock recorder for MockHelloServer
type MockHelloServerMockRecorder struct {
	mock *MockHelloServer
}

// NewMockHelloServer creates a new mock instance
func NewMockHelloServer(ctrl *gomock.Controller) *MockHelloServer {
	mock := &MockHelloServer{ctrl: ctrl}
	mock.recorder = &MockHelloServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloServer) EXPECT() *MockHelloServerMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockHelloServer) SayHello(arg0 context.Context, arg1 *HelloRequest) (*HelloReply, error) {
	ret := m.ctrl.Call(m, "SayHello", arg0, arg1)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockHelloServerMockRecorder) SayHello(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloServer)(nil).SayHello), arg0, arg1)
}
