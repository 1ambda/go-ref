// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveOneHandlerFunc turns a function with the right signature into a remove one handler
type RemoveOneHandlerFunc func(RemoveOneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveOneHandlerFunc) Handle(params RemoveOneParams) middleware.Responder {
	return fn(params)
}

// RemoveOneHandler interface for that can handle valid remove one params
type RemoveOneHandler interface {
	Handle(RemoveOneParams) middleware.Responder
}

// NewRemoveOne creates a new http.Handler for the remove one operation
func NewRemoveOne(ctx *middleware.Context, handler RemoveOneHandler) *RemoveOne {
	return &RemoveOne{Context: ctx, Handler: handler}
}

/*RemoveOne swagger:route DELETE /access/{id} access removeOne

RemoveOne remove one API

*/
type RemoveOne struct {
	Context *middleware.Context
	Handler RemoveOneHandler
}

func (o *RemoveOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveOneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
