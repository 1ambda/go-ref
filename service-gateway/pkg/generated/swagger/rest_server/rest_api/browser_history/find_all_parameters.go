// Code generated by go-swagger; DO NOT EDIT.

package browser_history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFindAllParams creates a new FindAllParams object
// with the default values initialized.
func NewFindAllParams() FindAllParams {

	var (
		// initialize parameters with default values

		currentPageOffsetDefault = int32(0)

		itemCountPerPageDefault = int64(10)
	)

	return FindAllParams{
		CurrentPageOffset: &currentPageOffsetDefault,

		ItemCountPerPage: &itemCountPerPageDefault,
	}
}

// FindAllParams contains all the bound params for the find all operation
// typically these are obtained from a http.Request
//
// swagger:parameters findAll
type FindAllParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	  Default: 0
	*/
	CurrentPageOffset *int32
	/*a column name which will be used for filtering
	`BrowserHistoryFilterType` definition

	  In: query
	*/
	FilterColummn *string
	/*a column value which will be used for filtering
	  In: query
	*/
	FilterValue *string
	/*
	  In: query
	  Default: 10
	*/
	ItemCountPerPage *int64
	/*'asc' or 'desc'
	  In: query
	*/
	OrderBy *string
	/*a column name which will be used for sorting
	  In: query
	*/
	SortBy *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindAllParams() beforehand.
func (o *FindAllParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCurrentPageOffset, qhkCurrentPageOffset, _ := qs.GetOK("currentPageOffset")
	if err := o.bindCurrentPageOffset(qCurrentPageOffset, qhkCurrentPageOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterColummn, qhkFilterColummn, _ := qs.GetOK("filterColummn")
	if err := o.bindFilterColummn(qFilterColummn, qhkFilterColummn, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterValue, qhkFilterValue, _ := qs.GetOK("filterValue")
	if err := o.bindFilterValue(qFilterValue, qhkFilterValue, route.Formats); err != nil {
		res = append(res, err)
	}

	qItemCountPerPage, qhkItemCountPerPage, _ := qs.GetOK("itemCountPerPage")
	if err := o.bindItemCountPerPage(qItemCountPerPage, qhkItemCountPerPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderBy, qhkOrderBy, _ := qs.GetOK("orderBy")
	if err := o.bindOrderBy(qOrderBy, qhkOrderBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sortBy")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindAllParams) bindCurrentPageOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindAllParams()
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("currentPageOffset", "query", "int32", raw)
	}
	o.CurrentPageOffset = &value

	return nil
}

func (o *FindAllParams) bindFilterColummn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.FilterColummn = &raw

	return nil
}

func (o *FindAllParams) bindFilterValue(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.FilterValue = &raw

	return nil
}

func (o *FindAllParams) bindItemCountPerPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindAllParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("itemCountPerPage", "query", "int64", raw)
	}
	o.ItemCountPerPage = &value

	return nil
}

func (o *FindAllParams) bindOrderBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.OrderBy = &raw

	return nil
}

func (o *FindAllParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SortBy = &raw

	return nil
}
